#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os, random
from copy import deepcopy


BROADCAST = "FFFF"
LEADER = 0
CANDIDATE = 1
FOLLOWER = 2

ELECTION_FREQ = (0.15, 0.3) # 150-300 milliseconds
FOLLOWER_FREQ = (0.25, 0.4) # 250-400 milliseconds

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        # Persistent state on all servers:
        self.term = 0 # latest term server has seen (initialized to 0 on first boot, increases monotonically)
        self.voted_for = None # candidateId that received vote in current term (or null if none)
        self.transaction_log = [{'command': None, 'term': 0}] # log entries; each entry contains command for state machine, and term when entry was received by leader (first index is 1)

        # Volatile state on all servers:
        self.commit_index = 0 # index of highest log entry known to be committed (initialized to 0, increases monotonically)
        self.last_applied = 0 # index of highest log entry applied to state machine (initialized to 0, increases monotonically)
        
        # Volatile state on leaders:
        self.match_index = {} # for each server, index of highest log entry known to be replicated on server (initialized to 0, increases monotonically)
        self.next_index = {} # for each server, index of the next log entry to send to that server (initialized to leader last log index + 1)

        self.keys_and_values = {}
        self.leader = BROADCAST
        self.heartbeat = time.time()
        self.append_time = time.time()
        self.state = FOLLOWER 
        self.votes = []
        self.election_timeout = 0.15
        self.prev_timeout = 0
        self.reset_timeouts()

        # Rather than clobbering peers with messages, queue them up for a bit as leader
        self.append_entries_clocks = {k:0 for k in self.others}

        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)
        

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    # Send periodic heartbeats (AppendEntries RPCs that carry no log entries) to all followers in order to maintain their authority
    def manage_heartbeat(self):
        time_span = time.time() - self.heartbeat
        if self.state == LEADER and time_span > 0.2:
            self.broadcast_append_entries(False)
            self.heartbeat = time.time()
        return 

    # check for time out
    def check_timeout(self):
        current_time = time.time()

        if self.state != LEADER:
            return (current_time - self.prev_timeout) >= self.election_timeout
        else:
            return False
     
    # reset the election and leader timeouts
    def reset_timeouts(self):
        if self.leader == BROADCAST:
            self.election_timeout = random.uniform(*ELECTION_FREQ)
        else:
            self.election_timeout = random.uniform(*FOLLOWER_FREQ)
        self.prev_timeout = time.time()

    # sending AppendEntries RPC to a replica
    def sending_append_entries(self, replica, entries=True):
        if self.state == LEADER:
            prev_log_index = self.next_index[replica] - 1
            prev_log_term = self.transaction_log[prev_log_index]['term']
            msg = {
                'src': self.id,
                'dst': replica,
                'leader': self.leader,
                'term': self.term,
                'type': 'append_entries',
                # Term of prev_log_idx entry
                'prevLogTerm': prev_log_term,
                # Index of log entry immediately preceeding new ones
                'prevLogIndex': prev_log_index,
                'entries': self.transaction_log[self.next_index[replica]:] if entries == True else [],
                'leaderCommit': self.commit_index
            }
            self.send(msg)
            # print("SENDING MESSAGE HERE: ", msg)
    
    # Commit the put requests stored in log
    def apply_commits(self):
        while self.last_applied < self.commit_index:
            self.last_applied += 1
            key = self.transaction_log[self.last_applied]['key']
            value = self.transaction_log[self.last_applied]['value']
            self.keys_and_values[key] = value

            if self.state == LEADER:
                msg = {
                    'src': self.id,
                    'dst': self.transaction_log[self.last_applied]['src'],
                    'leader': self.leader,
                    'type': "ok",
                    'MID': self.transaction_log[self.last_applied]['MID']
                }
                self.send(msg)

    # Sends an AppendEntries RPC to all replicas
    def broadcast_append_entries(self, entries=True):
        for replica in self.others:
            self.sending_append_entries(replica, entries)
        if entries == False:
            self.heartbeat = time.time()

    # Manage a received vote for an election of leader
    def manage_received_vote(self, msg):
        if msg['voteGranted'] == False:
            if self.state == CANDIDATE:
                if self.term < msg['term']:
                    self.term = msg['term']
                    self.state = FOLLOWER
                    self.voted_for = None
                    self.votes.clear()
                    self.reset_timeouts()

        if msg['voteGranted'] == True:
            if self.state == CANDIDATE:
                if msg['src'] in self.votes:
                    return
                else:
                    self.votes.append(msg['src'])
                # If the number of votes received is more than half of the number of the replicas, become leader
                if len(self.votes) > int((len(self.others) + 1) / 2):
                    self.votes.clear()
                    self.state = LEADER
                    self.leader = self.id
                    self.next_index.clear()
                    self.match_index.clear()
                    for replica in self.others:
                        self.next_index[replica] = len(self.transaction_log)
                        self.match_index[replica] = 0
                    self.broadcast_append_entries(False)

    # Manage a requested vote for an election of leader
    def manage_req_vote(self, msg):
        # vote denied message
        respond_ungranted = {}
        respond_ungranted['type'] = 'response'
        respond_ungranted['src'] = msg['dst']
        respond_ungranted['dst'] = msg['src']
        respond_ungranted['voteGranted'] = False
        respond_ungranted['leader'] = self.leader
        respond_ungranted['term'] = self.term

        # vote granted message
        respond_granted = {}
        respond_granted['leader'] = self.leader
        respond_granted['type'] = 'response'
        respond_granted['src'] = msg['dst']
        respond_granted['dst'] = msg['src']
        respond_granted['voteGranted'] = True
        respond_ungranted['term'] = self.term

        # If current term is outdated, transition to Follower
        if self.term < msg["term"]:
            self.state = FOLLOWER
            self.term = msg["term"]
            self.leader = msg["leader"]
            self.votes.clear()
            self.voted_for = None
            self.reset_timeouts()

        # Check conditions for granted votes
        if (msg["term"] < self.term) or (self.voted_for != None and self.voted_for != msg['src']) or (len(self.transaction_log) - 1 > msg['lastLogIndex']) or (self.transaction_log[-1]['term'] > msg['lastLogTerm']):
            self.send(respond_ungranted) 
        else:
            self.send(respond_granted)
            self.voted_for = msg["src"]
            self.reset_timeouts()

    # Send fail message
    def send_fail(self, msg):
        msg_fail = {
            'src': msg['dst'],
            'dst': msg['src'],
            'leader': self.leader,
            'type': 'fail',
            'MID': msg['MID']
        }
        self.send(msg_fail)
    
    # Broadcast RequestVote to other replicas, implementing RequestVote RPC, transition to state candidate
    def broadcast_req_vote(self):
        if self.state == CANDIDATE:
            for replica in self.others:
                msg_vote = {
                    'src': self.id,
                    'dst': replica,
                    'leader': self.leader,
                    'term': self.term,
                    'type': 'vote',
                    'lastLogIndex': len(self.transaction_log) - 1, # index of candidate’s last log entry
                    'lastLogTerm': self.transaction_log[-1]['term'] # term of candidate’s last log entry
                    # ,'vote': self.received_votes
                    }
                self.send(msg_vote)
        return

    # Send an OK message
    def send_ok(self, msg, value=None):
        if value != None:
            msg = {
                "src": self.id, 
                "dst": msg['src'], 
                "leader": self.leader, 
                "type": "ok", 
                "MID": msg['MID'],
                "value": value,
                "term": self.term
                }
            self.send(msg)
        else:
            msg = {
                "src": self.id, 
                "dst": msg['src'], 
                "leader": self.leader, 
                "type": "ok", 
                "MID": msg['MID'],
                "term": self.term
                }
            self.send(msg)

    # Begin election process
    def transition_to_vote(self):
        self.state = CANDIDATE
        self.leader = BROADCAST
        self.term += 1
        self.voted_for = self.id
        self.votes = [self.id]
        self.broadcast_req_vote()
        self.reset_timeouts()
          
    # Manage put requests from client
    def manage_put(self, msg):
        if self.state == LEADER:
            # appending put command to transaction log
            self.transaction_log.append( {'term': self.term,'key': msg['key'], 
             'value': msg['value'], 'src': msg['src'], 'MID': msg['MID']})
            self.broadcast_append_entries()
            # self.keys_and_values[msg['key']] = msg['value']
            # self.send_ok(msg)
        elif self.leader is None:
            self.send_fail(msg)
        elif self.leader != None and self.id != msg['leader']:
        # else:
            redirect_msg = {
                "src": self.id, 
                "dst": msg['src'], 
                "leader": self.leader, 
                "type": "redirect", 
                "MID": msg['MID']
                }
            self.send(redirect_msg)
    
    # Manage get requests from client
    def manage_get(self, msg):
        if self.state == LEADER:
            # appending get command to transaction log
            # self.transaction_log.append( {'term': self.term,'key': msg['key'], 'src': msg['src'], 'MID': msg['MID']}
            if msg['key'] in self.keys_and_values:
                self.send_ok(msg, self.keys_and_values[msg['key']])
            else:
                self.send_ok(msg, "")
        elif self.leader is None:
            self.send_fail(msg)
        elif self.leader != None and self.id != msg['leader']:
        # else:
            redirect_msg = {
                "src": self.id, 
                "dst": msg['src'], 
                "leader": self.leader, 
                "type": "redirect", 
                "MID": msg['MID']
                }
            self.send(redirect_msg)

    # Manage incoming append entries
    def manage_append_entries(self, msg):
        if msg['term'] >= self.term:
            self.term = msg['term']
            self.state = FOLLOWER
            self.leader = msg['leader']
            self.votes = []
            self.voted_for = None
            self.reset_timeouts()

        if self.state == FOLLOWER:
            # False message to deny append entries
            return_false = {
                    'src': self.id,
                    'dst': msg['src'],
                    'leader': self.leader,
                    'type': 'false',
                    'term': self.term
                    }
            #  Reply false if term < currentTerm (§5.1)
            if msg['term'] < self.term:
                return

            elif len(self.transaction_log) - 1 < msg['prevLogIndex']:
                return_false['nextIndex'] = len(self.transaction_log)
                self.send(return_false)
                return

            # Reply false if log doesn’t contain an entry at prevLogIndex whose term matches prevLogTerm (§5.3)
            elif self.transaction_log[msg['prevLogIndex']]['term'] != msg['prevLogTerm']:
                i = 0
                while i < len(self.transaction_log):
                    if self.transaction_log[i]['term'] == self.transaction_log[msg['prevLogIndex']]['term']:
                        break
                    i += 1
                return_false['nextIndex'] = i            
                self.send(return_false)
                return

            # If an existing entry conflicts with a new one (same index but different terms), delete the existing entry and all that follow it (§5.3)
            self.transaction_log = self.transaction_log[:msg['prevLogIndex'] + 1]
            # Append any new entries not already in the log
            self.transaction_log.extend(msg['entries'])

            # If leaderCommit > commitIndex, set commitIndex = min(leaderCommit, index of last new entry)
            if msg['leaderCommit'] > self.commit_index:
                self.commit_index = min(msg['leaderCommit'], len(self.transaction_log) - 1)

            if msg['entries']:
                # True message to approve append entries
                return_true = {
                        'src': self.id,
                        'dst': msg['src'],
                        'leader': self.leader,
                        'type': 'true',
                        'term': self.term
                        }
                return_true['nextIndex'] = len(self.transaction_log)
                self.send(return_true)
            self.apply_commits()

    # Manage approved append entries as the leader
    def manage_true_append_msg(self, msg):
        if self.state == LEADER:
            self.next_index[msg['src']] = msg['nextIndex']
            self.match_index[msg['src']] = msg['nextIndex'] - 1
    
            log_length = len(self.transaction_log) - 1
            while log_length >= 0:
                if self.transaction_log[log_length]['term'] == self.term:
                    count = 0
                    for i in self.match_index:
                        if self.match_index[i] >= log_length:
                            count += 1
                    if count >= ((len(self.others) + 1) // 2):
                        break
                log_length -= 1
                
            if log_length > self.commit_index:
                self.commit_index = log_length
                self.apply_commits()


    # Manage denied append entries as the leader
    def manage_false_append_msg(self, msg):
        if self.state == LEADER:
            self.next_index[msg['src']] = msg['nextIndex'] if 'nextIndex' in msg else (self.next_index[msg['src']] - 1)
            self.sending_append_entries(msg['src'], True)

    # Run the raft consensus simulation        
    def run(self):
        while True:
            self.manage_heartbeat() # send periodic heartbeats to all followers in order to maintain their authority and to avoid election timeouts

            data, addr = self.socket.recvfrom(65535)
            msg = data.decode('utf-8')

            print("Received message '%s'" % (msg,), flush=True)
            msg = json.loads(msg)
            
            # Check for message types and perform actions correlated with the types
            if msg['type'] == 'true':
                self.manage_true_append_msg(msg)
            elif msg['type'] == 'false':
                self.manage_false_append_msg(msg)
            elif msg['type'] == 'append_entries':
                self.manage_append_entries(msg)
            elif msg["type"] == "response":
                self.manage_received_vote(msg)
            elif msg["type"] == "vote":
                self.manage_req_vote(msg)
                self.reset_timeouts()
            elif msg['type'] == "put":
                self.manage_put(msg)
            elif msg['type'] == "get":
                self.manage_get(msg)

           
            # Begin leader election if election timeout reached or there is no leader
            if self.check_timeout() and self.state != LEADER:
                self.transition_to_vote()
            
            
            
            


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()